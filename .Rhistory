library(washr)
setup_rawdata()
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(readxl)
library(openxlsx)
# Read data --------------------------------------------------------------------
data_in <- readr::read_csv("data-raw/Borehole Forensics 4 - Pumping Test 2025-03-03.csv")
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") |>
# clean_names()
# Tidy data --------------------------------------------------------------------
## Clean the raw data into a tidy format here
boreholeforensicspumpingtest <- data_in
boreholeforensicspumpingtest[] <- lapply(boreholeforensicspumpingtest,function(x) {
if (is.character(x)) {
stringi::stri_enc_toutf8(x)
} else {
x
}
})
check_utf8 <- function(df) {
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Only check character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
tryCatch({
iconv(x, from = "UTF-8", to = "UTF-8", sub = "byte") != x
}, error = function(e) TRUE) # Treat errors as non-UTF-8
}))
})
# Get column names with issues
bad_cols <- names(df)[invalid_cols]
if (length(bad_cols) > 0) {
cat("Non-UTF characters detected in columns:", paste(bad_cols, collapse = ", "), "\n")
} else {
cat("No non-UTF characters found.\n")
}
}
#boreholeforensicspumpingtest$country <- iconv(boreholeforensicspumpingtest$country, from = "UTF-8", to = "UTF-8", sub = "")
# Run check
check_utf8(boreholeforensicspumpingtest)
# Export Data ------------------------------------------------------------------
usethis::use_data(boreholeforensicspumpingtest, overwrite = TRUE)
fs::dir_create(here::here("inst", "extdata"))
readr::write_csv(boreholeforensicspumpingtest,
here::here("inst", "extdata", paste0("boreholeforensicspumpingtest", ".csv")))
openxlsx::write.xlsx(boreholeforensicspumpingtest,
here::here("inst", "extdata", paste0("boreholeforensicspumpingtest", ".xlsx")))
setup_dictionary()
setup_roxygen()
devtools::document()
devtools::check()
devtools::install()
use_author(
given = "Emmanuel",
family = "Mhango",
role = c("aut", "cre"),
email = "emmanuellmhango@gmail.com",
comment = c(ORCID = "XXXX-XXXX-XXXX-XXXX")
)
use_author(given = "Finlay", family = "Paterson", role = "aut")
use_author(given = "Paul", family = "Kumpukwe", role = "aut")
use_author(given = "Gloria", family = "Musopole", role = "ctb")
use_author(given = "Gloria", family = "Maliana", role = "ctb")
use_author(given = "Florence", family = "Chirwa", role = "ctb")
use_author(given = "Given", family = "Nyasulu", role = "ctb")
use_author(given = "Feston", family = "Bwanyula", role = "ctb")
update_description()
devtools::document()
devtools::check()
devtools::install()
setup_readme()
install.packages("lubridate")
devtools::build_readme()
setup_website()
devtools::document()
devtools::check()
devtools::install()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
devtools::build_readme()
pkgdown::build_site()
install.packages("ggplot2")
devtools::build_readme()
devtools::document()
devtools::check()
devtools::install()
devtools::build_readme()
pkgdown::build_site()
library(ggplot2)
library(lubridate)
# Convert date_of_survey_or_test to Date format and extract year
boreholeforensicspumpingtest$year <- year(mdy(boreholeforensicspumpingtest$date_of_survey_or_test))
# Create the plot
ggplot(boreholeforensicspumpingtest, aes(x = year, y = static_water_level_metres_below_reference_point_before_start_of_test)) +
geom_point() +
theme_minimal() +
labs(
title = "Static Water Level by Year",
x = "Year",
y = "Static Water Level (m below reference point)"
)
devtools::build_readme()
devtools::document()
devtools::check()
devtools::install()
devtools::build_readme()
devtools::build_site()
usethis::create_github_token()
gitcreds::gitcreds_set()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
message = FALSE,
warning = FALSE,
fig.retina = 2,
fig.align = 'center'
)
# Chunk 2
## Run the following code in console if you don't have the packages
## install.packages(c("dplyr", "knitr", "readr", "stringr", "gt", "kableExtra"))
library(dplyr)
library(knitr)
library(readr)
library(stringr)
library(gt)
library(kableExtra)
# Chunk 3
extdata_path <- "https://github.com/openwashdata/boreholeforensicspumpingtest/raw/main/inst/extdata/"
read_csv("data-raw/dictionary.csv") |>
distinct(file_name) |>
dplyr::mutate(file_name = str_remove(file_name, ".rda")) |>
dplyr::rename(dataset = file_name) |>
mutate(
CSV = paste0("[Download CSV](", extdata_path, dataset, ".csv)"),
XLSX = paste0("[Download XLSX](", extdata_path, dataset, ".xlsx)")
) |>
knitr::kable()
# Chunk 4
library(boreholeforensicspumpingtest)
library(boreholeforensicspumpingtest)
library(ggplot2)
library(lubridate)
# Convert date_of_survey_or_test to Date format and extract year
boreholeforensicspumpingtest$year <- year(mdy(boreholeforensicspumpingtest$date_of_survey_or_test))
boreholeforensicspumpingtest
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(readxl)
library(openxlsx)
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
# Read data --------------------------------------------------------------------
data_in <- readr::read_csv("data-raw/Borehole Forensics 4 - Pumping Test.csv")
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
# Read data --------------------------------------------------------------------
data_in <- readr::read_csv("data-raw/Borehole Forensics 4 - Pumping Test.csv")
# Tidy data --------------------------------------------------------------------
## Clean the raw data into a tidy format here
boreholeforensicspumpingtest <- data_in
boreholeforensicspumpingtest[] <- lapply(boreholeforensicspumpingtest,function(x) {
if (is.character(x)) {
stringi::stri_enc_toutf8(x)
} else {
x
}
})
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
# Read data --------------------------------------------------------------------
data_in <- readr::read_csv("data-raw/Borehole Forensics 4 - Pumping Test.csv")
View(data_in)
glimpse(data_in)
glimpse(boreholeforensicspumpingtest)
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") |>
# clean_names()
names(data_in)
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") |>
# clean_names()
names(data_in) |> collapse()
data_in |>
rename(
pumping_test_possible = is_it_possible_to_complete_pumping_test,
pumping_test_not_possible_reason = specify_why_not_possible_to_complete_pumping_test,
static_water_level = static_water_level_metres_below_reference_point_before_start_of_test,
reference_level = reference_level_above_or_below_ground_level_in_miters,
pump_intake_depth = pump_intake_depth_in_miters,
total_hole_depth = total_hole_depth_in_miters,
water_level_stabilised = did_water_level_stabilise_while_pumping_at_0.25_liters_per_second,
dwl_at_0.25lps = established_dwl_at_0.25l_per_second_m,
max_pumping_rate = maximum_successful_pumping_rate_in_liters_per_second,
dwl_at_max_rate = dwl_at_maximum_pumping_rate,
borehole_passed = did_the_borehole_pass_a_pumping_test,
other_borehole_pass_reason = specify_other_borehole_pass_a_pumping_test
)
data_in |>
mutate(date_of_test = lubridate::mdy(date_of_test))
data_in |>
mutate(date_of_test2 = lubridate::mdy(date_of_test)) |>
relocate(date_of_test2)
data_in |>
mutate(date_of_test2 = lubridate::dmy(date_of_test))
data_in |>
mutate(date_of_test2 = lubridate::dmy(date_of_test)) |>
relocate(date_of_test2)
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
data_in <- readr::read_csv("data-raw/Borehole Forensics 4 - Pumping Test.csv")
boreholeforensicspumpingtest <- data_in |>
# reformate to Date class
mutate(date_of_test = lubridate::dmy(date_of_test)) |>
# rename variables
rename(
pumping_test_possible = is_it_possible_to_complete_pumping_test,
pumping_test_not_possible_reason = specify_why_not_possible_to_complete_pumping_test,
static_water_level = static_water_level_metres_below_reference_point_before_start_of_test,
reference_level = reference_level_above_or_below_ground_level_in_miters,
pump_intake_depth = pump_intake_depth_in_miters,
total_hole_depth = total_hole_depth_in_miters,
water_level_stabilised = did_water_level_stabilise_while_pumping_at_0.25_liters_per_second,
dwl_at_0.25lps = established_dwl_at_0.25l_per_second_m,
max_pumping_rate = maximum_successful_pumping_rate_in_liters_per_second,
dwl_at_max_rate = dwl_at_maximum_pumping_rate,
borehole_passed = did_the_borehole_pass_a_pumping_test,
other_borehole_pass_reason = specify_other_borehole_pass_a_pumping_test
)
install.packages("washr")
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
message = FALSE,
warning = FALSE,
fig.retina = 2,
fig.align = 'center'
)
# Chunk 2
## Run the following code in console if you don't have the packages
## install.packages(c("dplyr", "knitr", "readr", "stringr", "gt", "kableExtra"))
library(dplyr)
library(knitr)
library(readr)
library(stringr)
library(gt)
library(kableExtra)
# Chunk 3
extdata_path <- "https://github.com/openwashdata/boreholeforensicspumpingtest/raw/main/inst/extdata/"
read_csv("data-raw/dictionary.csv") |>
distinct(file_name) |>
dplyr::mutate(file_name = str_remove(file_name, ".rda")) |>
dplyr::rename(dataset = file_name) |>
mutate(
CSV = paste0("[Download CSV](", extdata_path, dataset, ".csv)"),
XLSX = paste0("[Download XLSX](", extdata_path, dataset, ".xlsx)")
) |>
knitr::kable()
# Chunk 4
library(boreholeforensicspumpingtest)
# Chunk 5
boreholeforensicspumpingtest |>
head(3) |>
gt::gt() |>
gt::as_raw_html()
# Chunk 6
readr::read_csv("data-raw/dictionary.csv") |>
dplyr::filter(file_name == "boreholeforensicspumpingtest.rda") |>
dplyr::select(variable_name:description) |>
knitr::kable() |>
kableExtra::kable_styling("striped") |>
kableExtra::scroll_box(height = "200px")
# Chunk 7
# library(boreholeforensicspumpingtest)
# library(ggplot2)
# library(lubridate)
#
# # Create the plot
# ggplot(boreholeforensicspumpingtest,
#        aes(x = year,
#            y = static_water_level_metres_below_reference_point_before_start_of_test)) +
#   geom_point() +
#   theme_minimal() +
#   labs(
#     title = "Static Water Level by Year",
#     x = "Year",
#     y = "Static Water Level (m below reference point)"
#   )
citation("boreholeforensicspumpingtest")
